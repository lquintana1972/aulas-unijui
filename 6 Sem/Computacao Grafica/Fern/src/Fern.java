
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Window;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Fern.java
 *
 * Created on 12/10/2011, 13:58:00
 */
/**
 *
 * @author rudieri
 */
public class Fern extends javax.swing.JFrame {

    double[] dA = new double[2];
    double[] dB = new double[6];
    double[] dC = new double[6];
    double[] dD = new double[6];
    int[] iRand = new int[4];
    private int X;
    private int Y;
    private int difX;
    private int difY;
    private double escala;

    /** Creates new form Fern */
    public Fern() {
        initComponents();
        dA[0] = 0;
        dA[1] = 0.16;
        dB[0] = 0.2;
        dB[1] = -0.26;
        dB[2] = 0;
        dB[3] = 0.23;
        dB[4] = 0.22;
        dB[5] = 1.6;
        dC[0] = -0.15;
        dC[1] = 0.28;
        dC[2] = 0;
        dC[3] = 0.26;
        dC[4] = 0.25;
        dC[5] = 0.44;
        dD[0] = 0.85;
        dD[1] = 0.04;
        dD[2] = 0;
        dD[3] = -0.04;
        dD[4] = 0.85;
        dD[5] = 1.6;
        iRand[0] = 1;
        iRand[1] = 8;
        iRand[2] = 15;
        iRand[3] = 85;
        escala = 100;
        X = getWidth() / 2;
        Y = getHeight();
        initListeners();
    }

    private void initListeners() {
        this.addWindowStateListener(new WindowAdapter() {

            @Override
            public void windowStateChanged(WindowEvent e) {
                super.windowStateChanged(e);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Fern.class.getName()).log(Level.SEVERE, null, ex);
                }
                X = getWidth() / 2;
                Y = getHeight();
                System.out.println(X);
                repaint();
            }
        });
        this.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                difX = X - e.getX();
                difY = Y - e.getY();
            }
        });
        this.addMouseMotionListener(new MouseMotionAdapter() {

            private int count;

            @Override
            public void mouseDragged(MouseEvent e) {
                X = e.getX() + difX;
                Y = e.getY() + difY;
                count++;
                super.mouseDragged(e);
                if (count > 5) {
                    count = 0;
                    repaint();
                }
            }
        });
        this.addMouseWheelListener(new MouseWheelListener() {

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                escala -= e.getWheelRotation() * 32;
                repaint();
            }
        });
    }

    @Override
    public void paint(Graphics g) {
//        super.paint(g);
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, getWidth(), getHeight());
        geraFern(g, 3000000, X, Y, escala, dA, dB, dC, dD, iRand, Color.green);
    }

    private void geraFern(Graphics g, int iIterations, int xInicio, int xFim, double dScale, double[] dA, double[] dB, double[] dC, double[] dD, int[] iRand, Color cor) {

        int random;
        double dX = 0;
        double dY = 0;
        double novoX = 0;
        double novoY = 0;

        for (int i = 0; i < iIterations; i++) {

            random = (int) (Math.random() * 100);
            if (random < iRand[0]) {
                novoX = dA[0];
                novoY = dA[1] * dY;

            } else if (random < iRand[1]) {
                novoX = (dB[0] * dX) + (dB[1] * dY) + dB[2];
                novoY = (dB[3] * dX) + (dB[4] * dY) + dB[5];
            } else if (random < iRand[2]) {
                novoX = (dC[0] * dX) + (dC[1] * dY) + dC[2];
                novoY = (dC[3] * dX) + (dC[4] * dY) + dC[5];
            } else {
                novoX = (dD[0] * dX) + (dD[1] * dY) + dD[2];
                novoY = (dD[3] * dX) + (dD[4] * dY) + dD[5];
            }
            dX = novoX;
            dY = novoY;
            g.setColor(cor);
            g.fillRect((int) Math.round(xInicio + (novoX * dScale)), (int) Math.round(xFim - (novoY * dScale)), 1, 1);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Fern().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
