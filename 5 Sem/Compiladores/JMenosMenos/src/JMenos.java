/* Generated By:JavaCC: Do not edit this line. JMenos.java */
import java.util.*;
import java.io.*;
public class JMenos implements JMenosConstants {
        ArrayList<Simbolo> tab = new ArrayList<Simbolo>();
        String saida;
        String nome = "saida";
   public static void main(String[] args) {

        try {
                JMenos parser = new JMenos(new FileInputStream(new File((String)args[0])));
                parser.addSaida("import java.util.*;");
                parser.I();
                System.out.println("Reconheceu!");
                System.out.println("--------------");
                System.out.println(parser.getSaida());
                File novoArq=new File(parser.nome+".java");
                if (!novoArq.exists()) { // 
                   novoArq.createNewFile();
                }
                FileWriter fw = new FileWriter(novoArq);
                BufferedWriter bfw = new BufferedWriter(fw);
                bfw.write(parser.getSaida());
                bfw.close();
                fw.close();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
     }

     public void addSaida(String str, Boolean quebrarLinha){
                String nL="";
                if (quebrarLinha) { // 
                   nL+="\u005cn";
                }


        if (saida==null) {
           saida=str+nL;
        }else{
                saida+=str+nL;
        }
     }
     public void addSaida(String str){
        addSaida(str,true);
     }

     public String getSaida(){
        return saida;
     }

  final public void I() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(SPACE);
    jj_consume_token(TEXTO);
                System.out.println();
                nome = token.image;
                addSaida("public class " + nome,false);
    jj_consume_token(AC);
                addSaida("{",true);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METHOD:
      case MAE:
      case TEXTO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METHOD:
        jj_consume_token(METHOD);
        jj_consume_token(SPACE);
        jj_consume_token(TEXTO);
                addSaida("\u005ctpublic "+token.image,false);
        jj_consume_token(SPACE);
        jj_consume_token(TEXTO);
                        addSaida(" "+token.image,false);
        jj_consume_token(AC);
                        addSaida("\u005ct{");
        S();
        jj_consume_token(DC);
                        addSaida("\u005cn\u005ct}");
        break;
      case MAE:
        jj_consume_token(MAE);
                        addSaida("\u005ctpublic static void main(String[] args)",false);
        jj_consume_token(AC);
                        addSaida("\u005ct{");
        S();
        jj_consume_token(DC);
                        addSaida("\u005cn\u005ct}");
        break;
      case TEXTO:
        jj_consume_token(TEXTO);
                addSaida(token.image,false);
        jj_consume_token(SPACE);
        jj_consume_token(TEXTO);
                addSaida(" "+token.image,false);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(DC);
                addSaida("}",true);
  }

  final public void S() throws ParseException {
        String res;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPRIME:
      case LER:
      case TEXTO:
      case SPACE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPRIME:
        jj_consume_token(IMPRIME);
                        addSaida("System.out.println",false);
        break;
      case LER:
        jj_consume_token(LER);
                        addSaida("new Scanner(System.in).nextLine()",false);
        break;
      case TEXTO:
        jj_consume_token(TEXTO);
                        addSaida(token.image,false);
        break;
      case SPACE:
        jj_consume_token(SPACE);
                        addSaida(token.image,false);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public JMenosTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x130,0x130,0x3c0,0x3c0,};
   }

  /** Constructor with InputStream. */
  public JMenos(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JMenos(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JMenosTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JMenos(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JMenosTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JMenos(JMenosTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JMenosTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}


class Simbolo{
        public String nome;
        public int valor;
}
